num_vect <- c(0.5,55,-10,6)
tf <- (num_vect<1)
tf <- num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char, "Gonzalo")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep =" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <-sample(c(y,z),100)
my_na<-isna(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<- c(foo=11,bar=2, norf=NA)
vect
names
names(vect)
vect2<-c(11,2,NA())
vect2<-c(11,2,NA)
name(vect2)<-c("foo","bar","norf")
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo,"bar")])]
vect[c("foo,"bar")]]
vect[c("foo,"bar")]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector
dim(my_vector)
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patiens,my_matrix)
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
quit
exit
!
?
;
swirl();
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5=7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints<sample(10)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
a<- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
search()
search("package:ggplot2")
install.packages("devtools")
library(devtools)
find_rtools()
gtwd
getwd
getwd()
read.csv("mydata.csv")
dir()
dir
setwd("~/Trabajo/CursosOnline/DataAnalysis")
getwd()
myfunction
ñs
ls
ls()
myfunction <- function(x)
{
y<-rnomr(100)
mean(y)
}
ls()
dir()
clear
source("prueba.R")
ls
ls()
second(4)
second(4)
second(4:10)
x<-1
x=1
x=2
print(x)*
print(x)
print(x)
msg<-"hello"
x<-
d
x
x<-5
x
print(x)
x<-[1,2,3]
x<-{1,2,3}
x<-(1,2,3)
x<-c(1,2,3)
x
x(1)
x<-[1,2,3,4]
x<-(1,2,3,4)
x<-1:20
x
x<-1:100
x
vector()
vector(int)
vector()
x<-vector()
x
list('A',1)
x<-list('A',1)
x
x(1)
x[1]
x[2]
1L
Inf
1/0
1/Inf
0/0
attributes(x)
x<-list('A',1)
attributes(x)
c(0.5,0.6)
c(TRUE,FALSE)
c(T,F)
c("a","b","c")
x<-9:29
x<-vector("numeric",length=10)
x
c(1.7,"a")
c(TRUE,2)
c("a",TRUE)
as.numeric(x)
x<0:6
x<-0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
x<-("a","b","c")
as.numeric(x)
x<-c("a","b","c")
as.numeric(x)
m<-matrix(nrow=2,ncol=3)
atributs(m)
atributes(m)
attributes(m)
dim(m)
m
dim
dim(m)
m<-matrix(1:6,nrow=2,ncol=3)
m
m<-1:10
dim(m)<- c(2,5)
m
x<-1:3
y<-10:12
cbind(x,y)
rbind(x,y)
x<-factor(c("yes","yes","no","yes"))
x
table(x)
unclass(x)
attr(x)
attributes(x)
x<-factor(c("yes","yes","no","yes"),levels=c("yes","no")
)
x
unclass(x)
x<-c(1,2,NA,10,3)
x
is.na(x)
is.nan(x)
x<-c(1,2,NA,NaN,10,3)
is.nan(x)
is.na(x)
clear
cls
x<-data.frame(foo=1:4, bar=c(T,T,F,F))
x
nrow(x)
ncol(x)
attributes(x)
attributes(x.data.frame)
x<-1:3
names(x)
names(x)<-c("foo","bar","norf")
x
attributes(x)
read.table()
helpread.table()
help read.table()
? read.table()
? read.table
y<-data.frame(a=1,b="a")
dput(y())
dput(y)
dput(y, file="y.R")
x<-"foo"
y
dump(c("x","y"),file="data.R")
rm(x,y)
source("data.R")
x
y
dump(c("x","y"))
x<-c("a","b","c")
x[1]
x[2]
x[3]
x[1,2]
x[1:2]
x[c(1,2)]
x[[1 2 3]
x[[1 2 3]]
x[x>"a"]
install.packages("kernsmooth")
install.packages("KernSmooth")
load('KernSmooth')
load("KernSmooth")
library("KernSmooth")
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
interaction(f1,f2)
split(x,list(f1,f2))
debug(lm)
x<-1:100
lm(y-x)
lm(y-x)
?debug
lm(y-x)
options(error=recover)
read.csv("nosuchfile")
q
dir
library(datasets)
data(iris)
?iris
iris
mapply(iris,mean,iris$Species)
options=NULL
mapply(iris,mean,iris$Species)
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
library("xlsx")
if(!file.exists("data"))
{
dir.create("data")
}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","data/gas.xlsx")
gas<-read.xlsx("data/gas.xlsx")
library("xlsx")
install.packages("xlsx")
library("xlsx")
library("xlsx")
library("xlsx")
library("xlsx")
Sys.getenv("JAVA_HOME")
library(rJava)
library(rJava)
library("xlsx")
if(!file.exists("data"))
{
dir.create("data")
}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","data/gas.xlsx")
gas<-read.xlsx("data/gas.xlsx")
library("xlsx")
if(!file.exists("data"))
{
dir.create("data")
}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","data/gas.xlsx")
gas<-read.xlsx("data/gas.xlsx")
gas<-read.xlsx("data/gas.xlsx")
ls("data/gas.xlsx")
ls("data/")
ls("data/*")
gas<-read.xlsx("data/gas.xlsx",sheet=1)
? read.xlsx
gas<-read.xlsx("data/gas.xlsx",sheetIndex=1)
data<-gas(18:24,7:15)
data<-gas[18:24,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
sum(data$Zip*dat$Ext,na.rm=T)
sum(dat$Zip*dat$Ext,na.rm=T)
dat<-gas[18:24,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
dat
gas<-read.xlsx("data/gas.xlsx",sheetIndex=1,startRow=18,endRow=23)
gas
gas<-read.xlsx("data/gas.xlsx",sheetIndex=1,startRow=18,endRow=23)
dat<-gas[,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
xml.url <- “https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml”
xmlfile <- xmlTreeParse(xml.url)
xml.url <- “https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml”
xmlfile <- xmlTreeParse(xml.url)
install.packages("XML")
library(XML)
xml.url <- “https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml”
xmlfile <- xmlTreeParse(xml.url)
install.packages("XML")
xmlfile
library(XML)
xml.url <- “https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml”
xmlfile <- xmlTreeParse(xml.url)
library(XML)
xml.url <- “https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml”
xml.url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xmlfile <- xmlTreeParse(xml.url)
class(xmlfile)
library(XML)
xml.url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xmlfile <- xmlTreeParse(xml.url)
xmlfile <- xmlTreeParse("data/restaurants.xml")
xmlfile <- xmlTreeParse(xml.url)
xml.url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xmlfile <- xmlTreeParse(xml.url,useInternal=TRUE)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode<-xmlRoot(doc)
selectedData<-read.csv("selectedData.csv")
png(filename= "plot4.png",width=480, height=480)
par(mfrow=c(2,2))
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
plot(selectedData$TimeStamp,selectedData$Voltage,xlab="datetime",ylab= "Voltage",type="l")
plot(selectedData$TimeStamp,selectedData$Sub_metering_1,ylab= "Energy sub metering",xlab="",type="l")
lines(selectedData$TimeStamp,selectedData$Sub_metering_2,col="red")
lines(selectedData$TimeStamp,selectedData$Sub_metering_3,col="blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lwd=c(2.5,2.5),col=c("black","red","blue"))
plot(selectedData$TimeStamp,selectedData$Global_reactive_power,xlab="datetime",ylab= "Global_reactive_power",type="l")
dev.off()
selectedData<-read.csv("selectedData.csv")
png(filename= "plot1.png",width=480, height=480)
hist(selectedData$Global_active_power,col ="red",xlab= "Global Active Power (kilowatts)",main ="Global Active Power")
dev.off()
setwd("~/Trabajo/CursosOnline/DataScience/ExploratoryDataAnalysis/ExData_Plotting1")
selectedData<-read.csv("selectedData.csv")
png(filename= "plot1.png",width=480, height=480)
hist(selectedData$Global_active_power,col ="red",xlab= "Global Active Power (kilowatts)",main ="Global Active Power")
dev.off()
data<-read.csv("household_power_consumption.txt",sep=";")
#Concatenation of Data and Time variables
dateTime<-paste(data$Date,data$Time,sep=" ")
#Converting Data and Time in objects of classes POSIX
data$TimeStamp<-strptime(dateTime,format="%d/%m/%Y %H:%M:%S")
selectedData<-data[data$TimeStamp>=strptime("2007-02-01",format="%Y-%m-%d") & data$TimeStamp<=strptime("2007-02-02 23:59:59",format="%Y-%m-%d %H:%M:%S"),]
write.csv(selectedData,file="selectedData.csv")
selectedData<-read.csv("selectedData.csv")
png(filename= "plot4.png",width=480, height=480)
par(mfrow=c(2,2))
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
plot(selectedData$TimeStamp,selectedData$Voltage,xlab="datetime",ylab= "Voltage",type="l")
plot(selectedData$TimeStamp,selectedData$Sub_metering_1,ylab= "Energy sub metering",xlab="",type="l")
lines(selectedData$TimeStamp,selectedData$Sub_metering_2,col="red")
lines(selectedData$TimeStamp,selectedData$Sub_metering_3,col="blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lwd=c(2.5,2.5),col=c("black","red","blue"))
plot(selectedData$TimeStamp,selectedData$Global_reactive_power,xlab="datetime",ylab= "Global_reactive_power",type="l")
dev.off()
selectedData<-read.csv("selectedData.csv")
png(filename= "plot2.png",width=480, height=480)
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
dev.off()
selectedData<-read.csv("selectedData.csv")
#png(filename= "plot2.png",width=480, height=480)
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
#dev.off()
selectedData$TimeStamp
str(selectedData$TimeStamp)
data
head(data)
data<-read.csv("household_power_consumption.txt",sep=";")
#Concatenation of Data and Time variables
dateTime<-paste(data$Date,data$Time,sep=" ")
#Converting Data and Time in objects of classes POSIX
data$TimeStamp<-strptime(dateTime,format="%d-%m-%Y %H:%M:%S")
selectedData<-data[data$TimeStamp>=strptime("2007-02-01",format="%Y-%m-%d") & data$TimeStamp<=strptime("2007-02-02 23:59:59",format="%Y-%m-%d %H:%M:%S"),]
write.csv(selectedData,file="selectedData.csv")
selectedData<-read.csv("selectedData.csv")
#png(filename= "plot2.png",width=480, height=480)
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
#dev.off()
selectedData<-read.csv("selectedData.csv")
#png(filename= "plot2.png",width=480, height=480)
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
#dev.off()
data<-read.csv("household_power_consumption.txt",sep=";")
#Concatenation of Data and Time variables
dateTime<-paste(data$Date,data$Time,sep=" ")
head(dateTime)
data$TimeStamp<-strptime(dateTime,format="%d/%m/%Y %H:%M:%S")
str(data$TimeStamp)
png(filename= "plot1.png",width=480, height=480)
hist(selectedData$Global_active_power,col ="red",xlab= "Global Active Power (kilowatts)",main ="Global Active Power")
dev.off()
png(filename= "plot2.png",width=480, height=480)
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
dev.off()
png(filename= "plot3.png",width=480, height=480)
plot(selectedData$TimeStamp,selectedData$Sub_metering_1,ylab= "Energy sub metering",xlab="",type="l")
lines(selectedData$TimeStamp,selectedData$Sub_metering_2,col="red")
lines(selectedData$TimeStamp,selectedData$Sub_metering_3,col="blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lwd=c(2.5,2.5),col=c("black","red","blue"))
dev.off()
data<-read.csv("household_power_consumption.txt",sep=";")
#Concatenation of Data and Time variables
dateTime<-paste(data$Date,data$Time,sep=" ")
#Converting Data and Time in objects of classes POSIX
data$TimeStamp<-strptime(dateTime,format="%d/%m/%Y %H:%M:%S")
selectedData<-data[data$TimeStamp>=strptime("2007-02-01",format="%Y-%m-%d") & data$TimeStamp<=strptime("2007-02-02 23:59:59",format="%Y-%m-%d %H:%M:%S"),]
str(selectedData$TimeStamp)
png(filename= "plot1.png",width=480, height=480)
hist(selectedData$Global_active_power,col ="red",xlab= "Global Active Power (kilowatts)",main ="Global Active Power")
dev.off()
png(filename= "plot2.png",width=480, height=480)
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
dev.off()
png(filename= "plot3.png",width=480, height=480)
plot(selectedData$TimeStamp,selectedData$Sub_metering_1,ylab= "Energy sub metering",xlab="",type="l")
lines(selectedData$TimeStamp,selectedData$Sub_metering_2,col="red")
lines(selectedData$TimeStamp,selectedData$Sub_metering_3,col="blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lwd=c(2.5,2.5),col=c("black","red","blue"))
dev.off()
png(filename= "plot4.png",width=480, height=480)
par(mfrow=c(2,2))
plot(selectedData$TimeStamp,selectedData$Global_active_power,xlab="",ylab= "Global Active Power (kilowatts)",type="l")
plot(selectedData$TimeStamp,selectedData$Voltage,xlab="datetime",ylab= "Voltage",type="l")
plot(selectedData$TimeStamp,selectedData$Sub_metering_1,ylab= "Energy sub metering",xlab="",type="l")
lines(selectedData$TimeStamp,selectedData$Sub_metering_2,col="red")
lines(selectedData$TimeStamp,selectedData$Sub_metering_3,col="blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lwd=c(2.5,2.5),col=c("black","red","blue"))
plot(selectedData$TimeStamp,selectedData$Global_reactive_power,xlab="datetime",ylab= "Global_reactive_power",type="l")
dev.off()
